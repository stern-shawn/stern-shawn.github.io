{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/higher-order-components/2017-7-11-HOCs/","webpackCompilationHash":"99ec2f49ffd060c735aa","result":{"data":{"site":{"siteMetadata":{"title":"SternJS","author":"Shawn Stern"}},"markdownRemark":{"id":"ad0084cd-4a89-5c93-b950-a87f1721e954","excerpt":"This repo is a simple example of studying HOCs and applying them to React-Redux based applications. In a nutshell, HOCs enable us to extend the functionality of…","html":"<p><a href=\"https://github.com/stern-shawn/continued-education/tree/master/udemy/React-Redux/higher-order-components-0\">This</a> repo is a simple example of studying HOCs and applying them to React-Redux based applications.</p>\n<p>In a nutshell, HOCs enable us to extend the functionality of an existing component (generally we call the result an ‘Enhanced’ or ‘Composed’ component). While many devs may not be aware of what a HOC is, if they’ve ever used React-Redux, they have already used HOCs unknowingly!</p>\n<p>The react-redux <code class=\"language-text\">connect(mapStateToProps, mapDispatchToProps)(Component)</code> pattern is an example of using the connect() HOC to extend a React component such that its <code class=\"language-text\">this.props</code> is actually connected to values and actions in the Redux store. Without this HOC, React-Rudux components wouldn’t be so easily connected to application state or be able to dispatch actions, which would make for a terrible development experience…</p>\n<h2>HOCs for Auth</h2>\n<p>In this particular example, I experimented with using HOCs to make it so users have to be signed in to view certain routes in a React application. For example, say I have a /resources page which has sensitive data, and I only want authenticated users to view it, how would we use a HOC to implement this?</p>\n<p>Lets implement a HOC that would handle this for us (assume I’ve already implemented the Redux store, actions, etc so that there is an authentication variable which tracks user auth status):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> browserHistory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ComposedComponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Authentication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Redirect user to home if not authenticated</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        browserHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Add in an update hook so that if the user signs out</span>\n    <span class=\"token comment\">// (which will update the authentication prop) we run</span>\n    <span class=\"token comment\">// a check and do a forced redirect to home</span>\n    <span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        browserHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Render the passed component, and pass down any</span>\n    <span class=\"token comment\">// additional properties using ES6 spread</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ComposedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    authenticated<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Authentication<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In a nutshell, the <code class=\"language-text\">Authentication</code> class exported by this HOC simply renders the passed component (say, our protected content component), while extending it with the <code class=\"language-text\">componentWillMount()</code> and <code class=\"language-text\">componentWillUpdate()</code> lifecycle hooks. The underlying component is rendered exactly the same way it would be without being wrapped in the HOC (unless the props passed using <code class=\"language-text\">...this.props</code> somehow manages to override a prop expected by <code class=\"language-text\">ComposedComponent</code>…).</p>\n<p>Inside of the <code class=\"language-text\">componentWillMount()</code> hook, we check to see if the user is authenticated. If so, nothing averse happens and rendering continues as normal. If not, the HOC tells React-Router to redirect the user to the home page since they are not authorized to view the protected content.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    browserHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Suppose the user is logged in, views the restricted content, and then logs out while still on the protected page? What should happen? Usually, they would be redirected to a home page or signin form to confirm that they have been successfully logged out. However, just using <code class=\"language-text\">componentWillMount()</code> will not accomplish this. This is where <code class=\"language-text\">componentWillUpdate()</code> kicks in. If the <code class=\"language-text\">authenticated</code> variable is changed, this will send new props to every component and trigger re-renders. <code class=\"language-text\">componentWillMount()</code> is passed a property called <code class=\"language-text\">nextProps</code> which lets us peek at the updated values and respond to it before the props are used. In this situation, we can peek at the new, incoming value of <code class=\"language-text\">authenticated</code>, and if it has been changed to <code class=\"language-text\">false</code>, redirect the user out of the protect area to Home.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">componentWillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextProps<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    browserHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But wait, how is our HOC even aware of the <code class=\"language-text\">authenticated</code> variable and its value? The answer is the <code class=\"language-text\">connect()</code> HOC that we see used when we return the <code class=\"language-text\">Authentication</code> component!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  authenticated<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>authenticated<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This component sounds great, but how do we actually make us of it in an application to protect a route? Here is a sample of how it would be employed in a very, very simple app:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> requireAuth <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/require_auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Router history<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>browserHistory<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>App<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"resources\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">requireAuth</span><span class=\"token punctuation\">(</span>Resources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that if the user navigates to <code class=\"language-text\">/resources</code>, the app will render not the <code class=\"language-text\">Resources</code> component directly, but the <code class=\"language-text\">Authentication</code> component (which we’ve imported as <code class=\"language-text\">requireAuth()</code>) with <code class=\"language-text\">Resources</code> as the child component to be wrapped.</p>\n<p>And that’s a basic method of implementing authentication control in React-Redux using HOCs. Obviously this only covers how to protect content on the client side, and not the matter of actually establishing if the user is authenticated by communicating with the server and then putting that value into Redux. That will be covered in a later project more specific to that idea (hopefully using JWTs which I’m curious to learn).</p>\n<p>If you’re interested in playing with the code, simply clone the <a href=\"https://github.com/stern-shawn/continued-education/tree/master/udemy/React-Redux/higher-order-components-0\">referenced git repository</a>, install deps using <code class=\"language-text\">npm install</code> or <code class=\"language-text\">yarn add</code>, run via <code class=\"language-text\">npm start</code>/<code class=\"language-text\">yarn start</code>, and visit <code class=\"language-text\">localhost:8080</code>.</p>","frontmatter":{"title":"Using Higher-Order Components in React","date":"July 11, 2017","description":"Using HOCs in React"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/higher-order-components/2017-7-11-HOCs/","previous":{"fields":{"slug":"/level-order-traversal/"},"frontmatter":{"title":"Digging into algorithms... Level-Order Traversals"}},"next":null}}}